{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Optional, Inject, NgModule } from '@angular/core';\n\nclass GoogleTagManagerService {\n  constructor(config = {\n    id: null\n  }, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview, googleTagManagerResourcePath, googleTagManagerCSPNonce) {\n    this.config = config;\n    this.googleTagManagerId = googleTagManagerId;\n    this.googleTagManagerAuth = googleTagManagerAuth;\n    this.googleTagManagerPreview = googleTagManagerPreview;\n    this.googleTagManagerResourcePath = googleTagManagerResourcePath;\n    this.googleTagManagerCSPNonce = googleTagManagerCSPNonce;\n    this.isLoaded = false;\n    this.browserGlobals = {\n      windowRef() {\n        return window;\n      },\n\n      documentRef() {\n        return document;\n      }\n\n    };\n\n    if (this.config == null) {\n      this.config = {\n        id: null\n      };\n    }\n\n    this.config = Object.assign(Object.assign({}, this.config), {\n      id: googleTagManagerId || this.config.id,\n      gtm_auth: googleTagManagerAuth || this.config.gtm_auth,\n      gtm_preview: googleTagManagerPreview || this.config.gtm_preview,\n      gtm_resource_path: googleTagManagerResourcePath || this.config.gtm_resource_path\n    });\n\n    if (this.config.id == null) {\n      throw new Error('Google tag manager ID not provided.');\n    }\n  }\n\n  getDataLayer() {\n    const window = this.browserGlobals.windowRef();\n    window.dataLayer = window.dataLayer || [];\n    return window.dataLayer;\n  }\n\n  pushOnDataLayer(obj) {\n    const dataLayer = this.getDataLayer();\n    dataLayer.push(obj);\n  }\n\n  addGtmToDom() {\n    return new Promise((resolve, reject) => {\n      if (this.isLoaded) {\n        return resolve(this.isLoaded);\n      }\n\n      const doc = this.browserGlobals.documentRef();\n      this.pushOnDataLayer({\n        'gtm.start': new Date().getTime(),\n        event: 'gtm.js'\n      });\n      const gtmScript = doc.createElement('script');\n      gtmScript.id = 'GTMscript';\n      gtmScript.async = true;\n      gtmScript.src = this.applyGtmQueryParams(this.config.gtm_resource_path ? this.config.gtm_resource_path : 'https://www.googletagmanager.com/gtm.js');\n      gtmScript.addEventListener('load', () => {\n        return resolve(this.isLoaded = true);\n      });\n      gtmScript.addEventListener('error', () => {\n        return reject(false);\n      });\n\n      if (this.googleTagManagerCSPNonce) {\n        gtmScript.setAttribute('nonce', this.googleTagManagerCSPNonce);\n      }\n\n      doc.head.insertBefore(gtmScript, doc.head.firstChild);\n    });\n  }\n\n  pushTag(item) {\n    return new Promise((resolve, reject) => {\n      if (!this.isLoaded) {\n        this.addGtmToDom().then(() => {\n          this.pushOnDataLayer(item);\n          return resolve();\n        }).catch(() => reject());\n      } else {\n        this.pushOnDataLayer(item);\n        return resolve();\n      }\n    });\n  }\n\n  applyGtmQueryParams(url) {\n    if (url.indexOf('?') === -1) {\n      url += '?';\n    }\n\n    return url + Object.keys(this.config).filter(k => this.config[k]).map(k => `${k}=${this.config[k]}`).join('&');\n  }\n\n}\n\nGoogleTagManagerService.ɵfac = function GoogleTagManagerService_Factory(t) {\n  return new (t || GoogleTagManagerService)(i0.ɵɵinject('googleTagManagerConfig', 8), i0.ɵɵinject('googleTagManagerId', 8), i0.ɵɵinject('googleTagManagerAuth', 8), i0.ɵɵinject('googleTagManagerPreview', 8), i0.ɵɵinject('googleTagManagerResourcePath', 8), i0.ɵɵinject('googleTagManagerCSPNonce', 8));\n};\n\nGoogleTagManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GoogleTagManagerService,\n  factory: GoogleTagManagerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleTagManagerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['googleTagManagerConfig']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['googleTagManagerId']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['googleTagManagerAuth']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['googleTagManagerPreview']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['googleTagManagerResourcePath']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['googleTagManagerCSPNonce']\n      }]\n    }];\n  }, null);\n})();\n\nclass GoogleTagManagerModule {\n  static forRoot(config) {\n    return {\n      ngModule: GoogleTagManagerModule,\n      providers: [{\n        provide: 'googleTagManagerConfig',\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nGoogleTagManagerModule.ɵfac = function GoogleTagManagerModule_Factory(t) {\n  return new (t || GoogleTagManagerModule)();\n};\n\nGoogleTagManagerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GoogleTagManagerModule\n});\nGoogleTagManagerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleTagManagerModule, [{\n    type: NgModule\n  }], null, null);\n})();\n/*\n * Public API Surface of angular-google-tag-manager\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GoogleTagManagerModule, GoogleTagManagerService };","map":{"version":3,"sources":["/Users/desarrolloeinnovacion/Documents/GitHub/RiveroRentasA/node_modules/angular-google-tag-manager/fesm2015/angular-google-tag-manager.mjs"],"names":["i0","Injectable","Optional","Inject","NgModule","GoogleTagManagerService","constructor","config","id","googleTagManagerId","googleTagManagerAuth","googleTagManagerPreview","googleTagManagerResourcePath","googleTagManagerCSPNonce","isLoaded","browserGlobals","windowRef","window","documentRef","document","Object","assign","gtm_auth","gtm_preview","gtm_resource_path","Error","getDataLayer","dataLayer","pushOnDataLayer","obj","push","addGtmToDom","Promise","resolve","reject","doc","Date","getTime","event","gtmScript","createElement","async","src","applyGtmQueryParams","addEventListener","setAttribute","head","insertBefore","firstChild","pushTag","item","then","catch","url","indexOf","keys","filter","k","map","join","ɵfac","ɵprov","type","args","providedIn","undefined","decorators","GoogleTagManagerModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Optional, Inject, NgModule } from '@angular/core';\n\nclass GoogleTagManagerService {\n    constructor(config = { id: null }, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview, googleTagManagerResourcePath, googleTagManagerCSPNonce) {\n        this.config = config;\n        this.googleTagManagerId = googleTagManagerId;\n        this.googleTagManagerAuth = googleTagManagerAuth;\n        this.googleTagManagerPreview = googleTagManagerPreview;\n        this.googleTagManagerResourcePath = googleTagManagerResourcePath;\n        this.googleTagManagerCSPNonce = googleTagManagerCSPNonce;\n        this.isLoaded = false;\n        this.browserGlobals = {\n            windowRef() {\n                return window;\n            },\n            documentRef() {\n                return document;\n            },\n        };\n        if (this.config == null) {\n            this.config = { id: null };\n        }\n        this.config = Object.assign(Object.assign({}, this.config), { id: googleTagManagerId || this.config.id, gtm_auth: googleTagManagerAuth || this.config.gtm_auth, gtm_preview: googleTagManagerPreview || this.config.gtm_preview, gtm_resource_path: googleTagManagerResourcePath || this.config.gtm_resource_path });\n        if (this.config.id == null) {\n            throw new Error('Google tag manager ID not provided.');\n        }\n    }\n    getDataLayer() {\n        const window = this.browserGlobals.windowRef();\n        window.dataLayer = window.dataLayer || [];\n        return window.dataLayer;\n    }\n    pushOnDataLayer(obj) {\n        const dataLayer = this.getDataLayer();\n        dataLayer.push(obj);\n    }\n    addGtmToDom() {\n        return new Promise((resolve, reject) => {\n            if (this.isLoaded) {\n                return resolve(this.isLoaded);\n            }\n            const doc = this.browserGlobals.documentRef();\n            this.pushOnDataLayer({\n                'gtm.start': new Date().getTime(),\n                event: 'gtm.js',\n            });\n            const gtmScript = doc.createElement('script');\n            gtmScript.id = 'GTMscript';\n            gtmScript.async = true;\n            gtmScript.src = this.applyGtmQueryParams(this.config.gtm_resource_path ? this.config.gtm_resource_path : 'https://www.googletagmanager.com/gtm.js');\n            gtmScript.addEventListener('load', () => {\n                return resolve(this.isLoaded = true);\n            });\n            gtmScript.addEventListener('error', () => {\n                return reject(false);\n            });\n            if (this.googleTagManagerCSPNonce) {\n                gtmScript.setAttribute('nonce', this.googleTagManagerCSPNonce);\n            }\n            doc.head.insertBefore(gtmScript, doc.head.firstChild);\n        });\n    }\n    pushTag(item) {\n        return new Promise((resolve, reject) => {\n            if (!this.isLoaded) {\n                this.addGtmToDom().then(() => {\n                    this.pushOnDataLayer(item);\n                    return resolve();\n                }).catch(() => reject());\n            }\n            else {\n                this.pushOnDataLayer(item);\n                return resolve();\n            }\n        });\n    }\n    applyGtmQueryParams(url) {\n        if (url.indexOf('?') === -1) {\n            url += '?';\n        }\n        return (url +\n            Object.keys(this.config)\n                .filter((k) => this.config[k])\n                .map((k) => `${k}=${this.config[k]}`)\n                .join('&'));\n    }\n}\nGoogleTagManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerService, deps: [{ token: 'googleTagManagerConfig', optional: true }, { token: 'googleTagManagerId', optional: true }, { token: 'googleTagManagerAuth', optional: true }, { token: 'googleTagManagerPreview', optional: true }, { token: 'googleTagManagerResourcePath', optional: true }, { token: 'googleTagManagerCSPNonce', optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nGoogleTagManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['googleTagManagerConfig']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['googleTagManagerId']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['googleTagManagerAuth']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['googleTagManagerPreview']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['googleTagManagerResourcePath']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['googleTagManagerCSPNonce']\n                    }] }];\n    } });\n\nclass GoogleTagManagerModule {\n    static forRoot(config) {\n        return {\n            ngModule: GoogleTagManagerModule,\n            providers: [{ provide: 'googleTagManagerConfig', useValue: config }],\n        };\n    }\n}\nGoogleTagManagerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGoogleTagManagerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerModule });\nGoogleTagManagerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: GoogleTagManagerModule, decorators: [{\n            type: NgModule\n        }] });\n\n/*\n * Public API Surface of angular-google-tag-manager\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GoogleTagManagerModule, GoogleTagManagerService };\n"]},"metadata":{},"sourceType":"module"}